// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password      String
  createdAt DateTime @default(now())
  role      Role     @default(USER)
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String?  @unique
  phone     String?  @unique
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
}

model Enquiry {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  createdAt DateTime      @default(now())
  status    EnquiryStatus @default(NEW)
}

model JobPosition {
  id        String   @id @default(cuid())
  title        String
  department   String
  location     String
  type         String
  experience   String
  description  String
  requirements String[]
  benefits     String[]
  createdAt    DateTime         @default(now())
  applications JobApplication[]
}

model JobApplication {
  id               String      @id @default(cuid())
  jobPositionId    String
  resume           String
  coverLetter      String?
  email            String
  phone            String?
  fullName         String
  experience String
  status           String      @default("APPLIED")
  createdAt        DateTime    @default(now())
  jobPosition      JobPosition @relation(fields: [jobPositionId], references: [id])
}

model Sport {
  id    Int     @id @default(autoincrement())
  name  String  
  createdAt DateTime @default(now())
  image String
  status Boolean @default(true)
}

model SportsAcademy {
id          String    @id @default(cuid())
name        String
description String
location    String
images      String[]
createdAt   DateTime  @default(now())
isActive    Boolean   @default(true)

// Relation to batches
batches     Batch[]
}

model Batch {
id            String          @id @default(cuid())
name          String
startDate     DateTime
endDate       DateTime
sport         String
headCoach     String
description   String?
startTime     String
endTime       String

// Relation back to academy
sportsAcademy SportsAcademy  @relation(fields: [sportsAcademyId], references: [id], onDelete: Cascade)
sportsAcademyId String
}

model SportsInfrastructure {
  id        String   @id @default(cuid())
  name      String
  location  String
  description String
  Area       Int?
  images     String[]
  createdAt DateTime @default(now())
  Amenities String[]
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  description String
  image     String
  createdAt DateTime @default(now())
  yearsOfExperience Int @default(0)
}

model Milestone {
  id        String   @id @default(cuid())
  year      String
  title     String
  description String
  image     String
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  membership      String
  comment   String
  image     String
  createdAt DateTime @default(now())
}



enum Role {
  USER
  ADMIN
}

enum EnquiryStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum JobApplicationStatus {
  APPLIED
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  OFFERED
  REJECTED
}
